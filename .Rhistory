n_image <- changeDirections(n_image)
M <- as.data.table(n_image)
M <- M[M$value > 0,]
mseg_sub3@ontology <- mseg_sub2@ontology
mseg_sub3 <- makeSegmentation(molten_array = M, ontology = "./Desktop/mouse_ontology.csv", subset_sagittal = 50, subset_axial = 50, subset_coronal = 50, draw_outline = FALSE)
mseg_sub3@ontology <- mseg_sub2@ontology
plotSegmentation(mseg_sub3, 1, 1, 1, show_outline = FALSE)
dim(n_image)
s_slice <- n_image[50,,]
dim(s_slice)
S <- as.data.table(s_slice)
head(S)
S <- reshape::melt(s_slice)
S <- reshape2::melt(s_slice)
head(S)
S$V1 <- 50
S <- S[,c(4, 1, 2, 3)]
colnames(S) <- c("V1", "V2", "V4", "value")
head(S)
colnames(S) <- c("V1", "V2", "V3", "value")
source("./Desktop/brainmaps/maxprojection.R")
source("./Desktop/brainmaps/maxprojection.R")
mseg_sub3 <- makeSegmentation(array = n_image, ontology = "./Desktop/mouse_ontology.csv", subset_sagittal = 50, subset_axial = 50, subset_coronal = 50, draw_outline = FALSE)
source("./Desktop/brainmaps/maxprojection.R")
mseg_sub3 <- makeSegmentation(array = n_image, ontology = "./Desktop/mouse_ontology.csv", subset_sagittal = 50, subset_axial = 50, subset_coronal = 50, draw_outline = FALSE)
source("./Desktop/brainmaps/maxprojection.R")
mseg_sub3 <- makeSegmentation(array = n_image, ontology = "./Desktop/mouse_ontology.csv", subset_sagittal = 50, subset_axial = 50, subset_coronal = 50, draw_outline = FALSE)
source("./Desktop/brainmaps/maxprojection.R")
mseg_sub3 <- makeSegmentation(array = n_image, ontology = "./Desktop/mouse_ontology.csv", subset_sagittal = 50, subset_axial = 50, subset_coronal = 50, draw_outline = FALSE)
source("./Desktop/brainmaps/maxprojection.R")
mseg_sub3 <- makeSegmentation(array = n_image, ontology = "./Desktop/mouse_ontology.csv", subset_sagittal = 50, subset_axial = 50, subset_coronal = 50, draw_outline = FALSE)
M_s <- reshape2::melt(n_image[subset_sagittal,,,drop = FALSE])
M_s$V1 <- subset_sagittal
M_s <- M_s[,c(4, 1, 2, 3)]
M_s <- M_s[M_s$value > 0,]
M_c <- reshape2::melt(n_image[,subset_coronal,,drop = FALSE])
M_c$V2 <- subset_coronal
M_c <- M_c[,c(1, 4, 2, 3)]
M_c <- M_c[M_c$value > 0,]
M_a <- reshape2::melt(n_image[,,subset_axial,drop = FALSE])
M_a$V3 <- subset_axial
M_a <- M_a[,c(1, 2, 4, 3)]
M_a <- M_a[M_a$value > 0,]
heaed(M_a)
head(M_a)
colnames(M_s) <- colnames(M_c) <- colnames(M_a) <- c("V1", "V2", "V3", "value")
head(M_a)
sl_s <- makeSlices(M_s, plane = "sagittal")
source("./Desktop/brainmaps/maxprojection.R")
mseg_sub3 <- makeSegmentation(array = n_image, ontology = "./Desktop/mouse_ontology.csv", subset_sagittal = 50, subset_axial = 50, subset_coronal = 50, draw_outline = FALSE)
M_s <- reshape2::melt(n_image[subset_sagittal,,,drop = FALSE])
M_s$V1 <- subset_sagittal
M_s <- M_s[,c(4, 1, 2, 3)]
M_s <- as.data.table(M_s[M_s$value > 0,])
M_c <- reshape2::melt(n_image[,subset_coronal,,drop = FALSE])
M_c$V2 <- subset_coronal
M_c <- M_c[,c(1, 4, 2, 3)]
M_c <- as.data.table(M_c[M_c$value > 0,])
M_a <- reshape2::melt(n_image[,,subset_axial,drop = FALSE])
M_a$V3 <- subset_axial
M_a <- M_a[,c(1, 2, 4, 3)]
M_a <- as.data.table(M_a[M_a$value > 0,])
colnames(M_s) <- colnames(M_c) <- colnames(M_a) <- c("V1", "V2", "V3", "value")
sl_s <- makeSlices(M_s, plane = "sagittal")
head(sl_s)
head(M_s)
M_s <- reshape2::melt(n_image[subset_sagittal,,])
M_s$V1 <- subset_sagittal
M_s <- M_s[,c(4, 1, 2, 3)]
M_s <- as.data.table(M_s[M_s$value > 0,])
M_c <- reshape2::melt(n_image[,subset_coronal,])
M_c$V2 <- subset_coronal
M_c <- M_c[,c(1, 4, 2, 3)]
M_c <- as.data.table(M_c[M_c$value > 0,])
M_a <- reshape2::melt(n_image[,,subset_axial])
M_a$V3 <- subset_axial
M_a <- M_a[,c(1, 2, 4, 3)]
M_a <- as.data.table(M_a[M_a$value > 0,])
head(M_a)
colnames(M_s) <- colnames(M_c) <- colnames(M_a) <- c("V1", "V2", "V3", "value")
head(M_s)
head(M_a)
head(M_c)
M_s <- reshape2::melt(n_image[subset_sagittal,,])
head(M_s)
M_s$V1 <- subset_sagittal
head(M_s)
M_s <- M_s[,c(4, 1, 2, 3)]
head(M_s)
M_s <- as.data.table(M_s[M_s$value > 0,])
head(M_s)
table(M_s$value)
M_s <- reshape2::melt(n_image[subset_sagittal,,])
table(M_s$value)
test <- apply(n_image, 3, sum)
head(test)
test[1:51]
n_image[subset_sagittal,,
]
table(n_image[subset_sagittal,,])
subset_sagittal
test <- apply(n_image, 1, sum)
test[1:41]
test[1:51]
test[1:100]
mseg_sub3 <- makeSegmentation(array = n_image, ontology = "./Desktop/mouse_ontology.csv", subset_sagittal = 103, subset_axial = 554, subset_coronal = 456, draw_outline = FALSE)
mseg_sub3@ontology <- mseg_sub2@ontology
plotSegmentation(mseg_sub3, 1, 1, 1)
plotSegmentation(mseg_sub3, 1, 1, 1, show_outline = FALSE)
head(ontology(mseg_sub3))
traceback()
head(ontology(mseg_sub3))
ontology(mseg_sub3)$col
sagittal_list <- lapply(mseg_sub3@slices$sagittal[[1]], function(x) {
polylist <- lapply(x, function(y) {
if(nrow(y@coords) < minsize) return(NULL) else return(buildPolygon(y))})
return(polylist[!unlist(lapply(polylist, is.null))])
})
sagittal_df <- as.data.frame(do.call(rbind, lapply(sagittal_list, function(x) do.call(rbind, x))))
sagittal_df$axis <- paste0("sagittal slice ",  unique(sagittal_df$slice))
coronal_list <- lapply(mseg_sub3@slices$coronal[[1]], function(x) {
polylist <- lapply(x, function(y) {
if(nrow(y@coords) < minsize) return(NULL) else return(buildPolygon(y))})
return(polylist[!unlist(lapply(polylist, is.null))])
})
coronal_df <- as.data.frame(do.call(rbind, lapply(coronal_list, function(x) do.call(rbind, x))))
coronal_df$axis <- paste0("coronal slice ", unique(coronal_df$slice))
axial_list <- lapply(mseg_sub3@slices$axial[[1]], function(x) {
polylist <- lapply(x, function(y) {
if(nrow(y@coords) < minsize) return(NULL) else return(buildPolygon(y))})
return(polylist[!unlist(lapply(polylist, is.null))])
})
axial_df <- as.data.frame(do.call(rbind, lapply(axial_list, function(x) do.call(rbind, x))))
axial_df$axis <- paste0("axial slice ", unique(axial_df$slice))
all_str_polys_axes <- rbind(sagittal_df, coronal_df, axial_df)
all_str_polys_axes$structure <- all_str_polys_axes$structure
all_str_polys_axes$col <- segmentation@ontology[as.character(all_str_polys_axes$structure), "col"]
all_str_polys_axes$acronym <- segmentation@ontology[as.character(all_str_polys_axes$structure), "acronym"]
all_str_polys_axes <- rbind(sagittal_df, coronal_df, axial_df)
all_str_polys_axes$structure <- all_str_polys_axes$structure
all_str_polys_axes$col <- mseg_sub3@ontology[as.character(all_str_polys_axes$structure), "col"]
all_str_polys_axes$acronym <- mseg_sub3@ontology[as.character(all_str_polys_axes$structure), "acronym"]
head(all_str_polys_axes)
cols = sapply(unique(all_str_polys_axes$acronym),
function(x) unique(all_str_polys_axes[all_str_polys_axes$acronym == x, "col"]))
cols = as.character(cols[levels(factor(all_str_polys_axes$acronym))])
cols
cols = sapply(unique(all_str_polys_axes$acronym),
+               function(x) unique(all_str_polys_axes[all_str_polys_axes$acronym == x, "col"]))
cols = sapply(unique(all_str_polys_axes$acronym),
function(x) unique(all_str_polys_axes[all_str_polys_axes$acronym == x, "col"]))
cols
all_str_polys_axes
cols = sapply(unique(all_str_polys_axes$acronym),
function(x) unique(all_str_polys_axes[all_str_polys_axes$acronym == x, "col"]))
cols
all_str_polys_axes
class(all_str_polys_axes$acronym)
all_str_polys_axes$acronym
unique(all_str_polys_axes$acronym)
head(all_str_polys_axes)
class(all_str_polys_axes4col)
class(all_str_polys_axes4$ol)
class(all_str_polys_axes$col)
lut <- data.frame("id" = unique(all_str_polys_axes$structure),
"acronym" = mseg_sub3@ontology[as.character(unique(all_str_polys_axes$structure)), "acronym"],
"col" = mseg_sub3@ontology[as.character(unique(all_str_polys_axes$structure)), "acronym"])
lut
lut <- data.frame("id" = unique(all_str_polys_axes$structure),
"acronym" = segmentation@ontology[as.character(unique(all_str_polys_axes$structure)), "acronym"],
"col" = segmentation@ontology[as.character(unique(all_str_polys_axes$structure)), "col"])
lut <- data.frame("id" = unique(all_str_polys_axes$structure),
"acronym" = mseg_sub3@ontology[as.character(unique(all_str_polys_axes$structure)), "acronym"],
"col" = mseg_sub3@ontology[as.character(unique(all_str_polys_axes$structure)), "col"])
lut
ontology(mseg_sub3)["265",]
unique(all_str_polys_axes$structure)
M_s <- reshape2::melt(n_image[subset_sagittal,,])
M_s$V1 <- subset_sagittal
M_s <- M_s[,c(4, 1, 2, 3)]
M_s <- as.data.table(M_s[M_s$value > 0,])
M_c <- reshape2::melt(n_image[,subset_coronal,])
M_c$V2 <- subset_coronal
M_c <- M_c[,c(1, 4, 2, 3)]
M_c <- as.data.table(M_c[M_c$value > 0,])
M_a <- reshape2::melt(n_image[,,subset_axial])
M_a$V3 <- subset_axial
M_a <- M_a[,c(1, 2, 4, 3)]
M_a <- as.data.table(M_a[M_a$value > 0,])
head(M_s)
head(M_a)
subset_sagittal = 103
subset_coronal = 395
subset_axial = 645
M_s <- reshape2::melt(n_image[subset_sagittal,,])
M_s$V1 <- subset_sagittal
M_s <- M_s[,c(4, 1, 2, 3)]
M_s <- as.data.table(M_s[M_s$value > 0,])
M_c <- reshape2::melt(n_image[,subset_coronal,])
M_c$V2 <- subset_coronal
M_c <- M_c[,c(1, 4, 2, 3)]
M_c <- as.data.table(M_c[M_c$value > 0,])
M_a <- reshape2::melt(n_image[,,subset_axial])
M_a$V3 <- subset_axial
M_a <- M_a[,c(1, 2, 4, 3)]
M_a <- as.data.table(M_a[M_a$value > 0,])
head(M_s)
table(M_s$value)
names(table(M_s$value))
mseg_sub3@ontology[names(table(M_s$value)),]
sl_s <- makeSlices(M_s, plane = "sagittal")
sl_c <- makeSlices(M_c, plane = "coronal")
sl_a <- makeSlices(M_a, plane = "axial")
head(M_s)
colnames(M_s) <- colnames(M_c) <- colnames(M_a) <- c("V1", "V2", "V3", "value")
sl_s <- makeSlices(M_s, plane = "sagittal")
sl_c <- makeSlices(M_c, plane = "coronal")
sl_a <- makeSlices(M_a, plane = "axial")
head(sl_s)
slices = list()
sp_s <- makePolygonSets(sl_s, parallel = parallel)
slices[["sagittal"]] <- sp_s
sp_c <- makePolygonSets(sl_c, parallel = parallel)
slices[["coronal"]] <- sp_c
sp_a <- makePolygonSets(sl_a, parallel = parallel)
slices[["axial"]] <- sp_a
sl_s <- makeSlices(M_s, plane = "sagittal")
sl_c <- makeSlices(M_c, plane = "coronal")
sl_a <- makeSlices(M_a, plane = "axial")
sp_s <- makePolygonSets(sl_s, parallel = parallel)
slices[["sagittal"]] <- sp_s
sp_c <- makePolygonSets(sl_c, parallel = parallel)
slices[["coronal"]] <- sp_c
sp_a <- makePolygonSets(sl_a, parallel = parallel)
slices[["axial"]] <- sp_a
parallel = FALSE
sp_s <- makePolygonSets(sl_s, parallel = parallel)
slices[["sagittal"]] <- sp_s
sp_c <- makePolygonSets(sl_c, parallel = parallel)
slices[["coronal"]] <- sp_c
sp_a <- makePolygonSets(sl_a, parallel = parallel)
slices[["axial"]] <- sp_a
slices$sagittal
sagittal_list <- lapply(slices$sagittal[[1]], function(x) {
polylist <- lapply(x, function(y) {
if(nrow(y@coords) < minsize) return(NULL) else return(buildPolygon(y))})
return(polylist[!unlist(lapply(polylist, is.null))])
})
sagittal_df <- as.data.frame(do.call(rbind, lapply(sagittal_list, function(x) do.call(rbind, x))))
sagittal_df$axis <- paste0("sagittal slice ",  unique(sagittal_df$slice))
coronal_list <- lapply(slices$coronal[[1]], function(x) {
polylist <- lapply(x, function(y) {
if(nrow(y@coords) < minsize) return(NULL) else return(buildPolygon(y))})
return(polylist[!unlist(lapply(polylist, is.null))])
})
coronal_df <- as.data.frame(do.call(rbind, lapply(coronal_list, function(x) do.call(rbind, x))))
coronal_df$axis <- paste0("coronal slice ", unique(coronal_df$slice))
axial_list <- lapply(slices$axial[[1]], function(x) {
polylist <- lapply(x, function(y) {
if(nrow(y@coords) < minsize) return(NULL) else return(buildPolygon(y))})
return(polylist[!unlist(lapply(polylist, is.null))])
})
axial_df <- as.data.frame(do.call(rbind, lapply(axial_list, function(x) do.call(rbind, x))))
axial_df$axis <- paste0("axial slice ", unique(axial_df$slice))
all_str_polys_axes <- rbind(sagittal_df, coronal_df, axial_df)
all_str_polys_axes$structure <- all_str_polys_axes$structure
all_str_polys_axes
all_str_polys_axes$col <- mseg_sub3@ontology[as.character(all_str_polys_axes$structure), "col"]
table(all_str_polys_axes$col)
all_str_polys_axes$acronym <- mseg_sub3@ontology[as.character(all_str_polys_axes$structure), "acronym"]
table(all_str_polys_axes$col)
table(all_str_polys_axes$acronym)
cols = sapply(unique(all_str_polys_axes$acronym),
function(x) unique(all_str_polys_axes[all_str_polys_axes$acronym == x, "col"]))
cols
cols = as.character(cols[levels(factor(all_str_polys_axes$acronym))])
cols
p <- ggplot() +
geom_polygon(data = all_str_polys_axes,
aes(x = x, y = y, group = id, subgroup = subid, fill = acronym),
color = "black") +
scale_fill_manual(values = c(cols, "white")) +
theme_bw() +
theme(legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
facet_wrap(~axis, nrow = 2)
p
clear()
source("./Desktop/brainmaps/maxprojection.R")
marr <- nat::read.nrrd(file = "./Desktop/mouse_brain/annotation_10.nrrd")
marr <- changeDirections(marr)
mseg_sub <- makeSegmentation(array = marr, ontology = "./Desktop/mouse_ontology.csv", subset_sagittal = 200, subset_coronal = 300, subset_axial = 300)
source("./Desktop/brainmaps/maxprojection.R")
mseg_sub <- makeSegmentation(array = marr, ontology = "./Desktop/mouse_ontology.csv", subset_sagittal = 200, subset_coronal = 300, subset_axial = 300)
rownames(mseg_sub@ontology) <- mseg_sub@ontology$id
mseg_sub@ontology$col <- paste0("#", mseg_sub@ontology$color_hex_triplet)
plotSegmentation(mseg_sub, 1, 1, 1, show_outline = FALSE)
cluster_mks_reg <- readRDS("./Desktop/habenula/mhbneurons_reg_cluster_marker_list.rds")
cluster_mks_nonreg <- readRDS("./Desktop/habenula/mhbneurons_nonreg_cluster_marker_list.rds")
head(cluster_mks_reg)
library(cocoframer)
cocoframer::get_gene_aba_ish_ids("Cldn11")
test <- get_aba_ish_data(get_gene_aba_ish_ids("Cldn11"))
en <- reshape2::melt(test)
library(rgl)
plot3d(en$Var1, en$Var2, en$Var3, col = en$value)
head(en)
en <- en[en$value > 0,]
plot3d(en$Var1, en$Var2, en$Var3, col = en$value)
en$col <- scales::col_numeric(palette = "spectral", en$value )
en$col <- scales::col_numeric(palette = "spectral", domain = en$value )
?scales::col_bin
en$col <- scales::col_numeric(palette = "Blues", domain = en$value )
scales::col_numeric(palette = "Blues", domain = en$value )
scales::col_numeric(palette = "Blues", domain = en$value)(en$value)
en$col = scales::col_numeric(palette = "Blues", domain = en$value)(en$value)
plot3d(en$Var1, en$Var2, en$Var3, col = en$col)
en$col = scales::col_numeric(palette = "Spectral", domain = en$value)(en$value)
plot3d(en$Var1, en$Var2, en$Var3, col = en$col)
gridann <- readBin("./Desktop/habenula/gridAnnotation.raw", what = "int", size = 4, endian = "little")
gridann
gridann <- readBin("./Desktop/habenula/gridAnnotation.raw", what = "int", size = 4, endian = "little", n = prod(67, 41, 58))
enm <- reshape2::melt(gridann)
plot3d(en$Var1, en$Var2, en$Var3, col = en$col)
enm <- enm[enm$value > 0,]
head(enm)
enm <- reshape2::melt(gridann)
head(enm)
gridann <- array(readBin("./Desktop/habenula/gridAnnotation.raw", what = "int", size = 4, endian = "little", n = prod(67, 41, 58)), dim = c(67, 41, 58))
enm <- reshape2::melt(gridann)
head(enm)
enm <- enm[enm$value > 0,]
head(enm)
pal <- colorspace::sequential_hcl(palette = "sunset", n = 10)
pal_chunks <- lapply(1:8, function(x) pal[1:(x+2)])
test <- structure(c(0, 0, 1,
1, 0, 0,
0, 1, 0), .Dim = c(3, 3))
palmat <- matrix(1:100, nrow = 10)
colnames(palmat) <- pal
rownames(palmat) <- pal
first_row <- c(0.4, 0.3, 0.2, 0.05, 0.02, 0.01, 0.008, 0.006, 0.004, 0.002)
box <- data.frame(x = rep(1:200, 200), y = rep(1:200, each = 200))
box$col <- do.call(c, pal_list)
plot(box[,1:2], col = box$col, pch = 16)
plot(box[,1:2], col = box$col, pch = 16)
box <- data.frame(x = rep(1:200, 200), y = rep(1:200, each = 200))
plot(box[,1:2], col = box$col, pch = 16)
palmat
start = c(0, 0, 1, 0)
segments(start)
segments(start[1], start[2], start[3], start[4])
start = c(0, 0, 0, 1)
segments(start[1], start[2], start[3], start[4])
start = c(0, 0, 0, 10)
segments(start[1], start[2], start[3], start[4])
tan(90*180/pi)
cos(90*180/pi)
cos(90/180*pi)
tan(180)
cos(180)
cos(90)
90 * pi / 180
rad
?rad()
cos(90 * pi / 180)
degToRad <- function(deg) return(deg * pi / 180)
tan(degToRad(90))
addLink <- function(x, y, deg) return(c(x = x + tan(degToRad(deg))*x, y = 10))
addLink(1,0)
addLink(1,0, 49)
addLink <- function(x, y, deg) return(c(x = x + tan(degToRad(deg))*10, y = 10))
addLink(1,0, 49)
remotes::install_github("thomasp85/ambient")
remotes::install_github("thomasp85/ambient")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
install.packages('ambient')
dat <- expand.grid(rep=gl(2,1), NO3=factor(c(0,10)),field=gl(3,1) )
dat
Agropyron <- with(dat, as.numeric(field) + as.numeric(NO3)+2) +rnorm(12)/2
Schizachyrium <- with(dat, as.numeric(field) - as.numeric(NO3)+2) +rnorm(12)/2
total <- Agropyron + Schizachyrium
dotplot(total ~ NO3, dat, jitter.x=TRUE, groups=field,
type=c('p','a'), xlab="NO3", auto.key=list(columns=3, lines=TRUE) )
Y <- data.frame(Agropyron, Schizachyrium)
head(Y)
NO3
dat
install.packages("vegan")
install.packages(c("clue", "rbibutils"))
yes
detach("package:base", unload = TRUE)
install.packages(c("clue", "rbibutils"))
install.packages("raster")
install.packages("raster")
install.packages("raster")
install.packages("raster")
file.edit("~/.Renviron")
install.packages(c('Rcpp', 'RcppArmadillo'))
install.packages(c("Rcpp", "RcppArmadillo"))
getwd()
Rcpp::sourceCpp('helloworld.cpp')
Rcpp::sourceCpp('hello.cpp')
install.packages("terra")
file.edit("~/.Renviron")
file.edit("~/R/Makevars")
file.edit("~/.R/Makevars")
install.packages("terra")
install.packages("terra")
install.packages(c("clue", "rbibutils"))
install.packages("terra")
install.packages("rgdal")
install.packages("rgeos")
install.packages("raster")
remove.packages("terra")
install.packages("terra")
install.packages("terra")
getwd()
setwd("./Desktop/research/projects/coldcuts/")
load_all()
check()
document()
library(ComplexHeatmap)
require(circlize)
mat = matrix(rnorm(100*10), nrow = 100)
split = sample(letters[1:10], 100, replace = TRUE)
text = lapply(unique(split), function(x) {
data.frame(month.name, col = rand_color(12, friendly = TRUE), fontsize = runif(12, 6, 14))
})
names(text) = unique(split)
Heatmap(mat, cluster_rows = FALSE, row_split = split,
right_annotation = rowAnnotation(wc = anno_text_box(split, text))
)
require(circlize)
mat = matrix(rnorm(10*10), nrow = 10)
split = sample(letters[1:10], 10, replace = TRUE)
text = lapply(unique(split), function(x) {
data.frame(month.name, col = rand_color(12, friendly = TRUE), fontsize = runif(12, 6, 14))
})
names(text) = unique(split)
Heatmap(mat, cluster_rows = FALSE, row_split = split,
right_annotation = rowAnnotation(wc = anno_text_box(split, text))
)
?anno_text_box
library(stringr)
# random inputs
gen_random_string <- function(n){
random_string = paste0(LETTERS[sample(seq_len(length(LETTERS)), size = n)], collapse = "")
return(random_string)
}
m = matrix(rnorm(70), nrow = 7)
# generate 7 random sets of labels, each set with a random number of labels each with a random length:
labels_list <- lapply(1:7, function(x) {
n_items = sample(seq_len(10), size = 1)
random_strings = unlist(lapply(seq_len(n_items), function(y) {
string_len = sample(seq_len(8), size = 1)
return(gen_random_string(string_len))
}))
})
# Wrap the string to a width of 10 characters and then break line
labels_list = lapply(labels_list, function(x)
paste0(strwrap(paste0(x, collapse = ", "), width = 10), collapse = "\n"))
# generate 7 random sets of labels, each set with a random number of labels each with a random length:
labels_list <- lapply(1:7, function(x) {
n_items = sample(seq_len(10), size = 1)
random_strings = unlist(lapply(seq_len(n_items), function(y) {
string_len = sample(seq_len(8), size = 1)
return(gen_random_string(string_len))
}))
})
# Create annotation
ha = rowAnnotation(wc = anno_text_box(align_to = 1:10
# Create annotation
ha = rowAnnotation(wc = anno_text_box(align_to = 1:10
# Create annotation
ha = rowAnnotation(wc = anno_text_box(align_to = 1:10,
# Create annotation
ha = rowAnnotation(wc = anno_text_box(align_to = 1:10,
text = labels_list,
by = "anno_link",
background_gp = gpar(fill = "white", col = "black")))
names(labels_list)
names(labels_list) <- 1:10
# Wrap the string to a width of 10 characters and then break line
labels_list = lapply(labels_list, function(x)
paste0(strwrap(paste0(x, collapse = ", "), width = 10), collapse = "\n"))
names(labels_list) <- 1:7
# Create annotation
ha = rowAnnotation(wc = anno_text_box(align_to = 1:7,
text = labels_list,
by = "anno_link",
background_gp = gpar(fill = "white", col = "black")))
# Create heatmap
hm = Heatmap(m,
cluster_columns = FALSE,
cluster_rows = FALSE,
right_annotation = ha)
draw(hm, padding = unit(c(0.2,0.1,0.2,.1), "npc"))
draw(hm, padding = unit(c(0.2,0.1,0.2,.1), "npc"))
# Create annotation
ha = rowAnnotation(wc = anno_text_box(align_to = 1:7,
text = labels_list,
by = "anno_block",
background_gp = gpar(fill = "white", col = "black")))
# Create heatmap
hm = Heatmap(m,
cluster_columns = FALSE,
cluster_rows = FALSE,
right_annotation = ha)
draw(hm, padding = unit(c(0.2,0.1,0.2,.1), "npc"))
